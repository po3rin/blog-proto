// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/po3rin/blog-proto/rpc/post (interfaces: PostClient,PostServer)

// Package mock_post is a generated GoMock package.
package mock_post

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	post "github.com/po3rin/blog-proto/rpc/post"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockPostClient is a mock of PostClient interface
type MockPostClient struct {
	ctrl     *gomock.Controller
	recorder *MockPostClientMockRecorder
}

// MockPostClientMockRecorder is the mock recorder for MockPostClient
type MockPostClientMockRecorder struct {
	mock *MockPostClient
}

// NewMockPostClient creates a new mock instance
func NewMockPostClient(ctrl *gomock.Controller) *MockPostClient {
	mock := &MockPostClient{ctrl: ctrl}
	mock.recorder = &MockPostClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostClient) EXPECT() *MockPostClientMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockPostClient) Get(arg0 context.Context, arg1 *post.OneReq, arg2 ...grpc.CallOption) (*post.OneRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*post.OneRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockPostClientMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPostClient)(nil).Get), varargs...)
}

// MockPostServer is a mock of PostServer interface
type MockPostServer struct {
	ctrl     *gomock.Controller
	recorder *MockPostServerMockRecorder
}

// MockPostServerMockRecorder is the mock recorder for MockPostServer
type MockPostServerMockRecorder struct {
	mock *MockPostServer
}

// NewMockPostServer creates a new mock instance
func NewMockPostServer(ctrl *gomock.Controller) *MockPostServer {
	mock := &MockPostServer{ctrl: ctrl}
	mock.recorder = &MockPostServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostServer) EXPECT() *MockPostServerMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockPostServer) Get(arg0 context.Context, arg1 *post.OneReq) (*post.OneRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*post.OneRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockPostServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPostServer)(nil).Get), arg0, arg1)
}
